//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class Solution
{
public:
int countSetBits(int n){
    int count=0;
    while(n){
        n = n&(n-1);
        count++;
    }
    return count;
}
    int is_bleak(int n)
    {
        // Code here.
        // for(int i=0;i<n;i++){
        //     if(i+countSetBits(i)==n) return 0;
        // }
        // return 1;
        //Calculate the maximum number of bits required to represent n using logarithm base 2.
        
        //here i denotes the number of how many bits required to make n
        // for(int i=0;i<=log2(n);i++)if(__builtin_popcount(n-i) == i)return false; 
        //   return true;
          
             int cnt=0;
        for(int i=n-sqrt(n);i<=n;i++)
        {
            int a=i;
            int set_bits = __builtin_popcount(a);
            // while(a>0)
            // {
            //     if(a&1)
            //     cnt++;
            //     a=a>>1;
            // }
           if(n==(i+set_bits))
               return 0;
           cnt=0;
        }
        
        return 1;
	}
};


//{ Driver Code Starts.
int main(){
    int T;
    cin >> T;
    while(T--)
    {
    	int n; 
    	cin >> n;
    	Solution ob;
    	int ans = ob.is_bleak(n);
    	cout << ans << "\n";
    }
	return 0;
}

// } Driver Code Ends
